/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef UserService_H
#define UserService_H

#include <thrift/TDispatchProcessor.h>
#include "acsuser_types.h"



class UserServiceIf {
 public:
  virtual ~UserServiceIf() {}
  virtual void add(const User& u) = 0;
  virtual void get(User& _return, const std::string& uid) = 0;
};

class UserServiceIfFactory {
 public:
  typedef UserServiceIf Handler;

  virtual ~UserServiceIfFactory() {}

  virtual UserServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(UserServiceIf* /* handler */) = 0;
};

class UserServiceIfSingletonFactory : virtual public UserServiceIfFactory {
 public:
  UserServiceIfSingletonFactory(const boost::shared_ptr<UserServiceIf>& iface) : iface_(iface) {}
  virtual ~UserServiceIfSingletonFactory() {}

  virtual UserServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(UserServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<UserServiceIf> iface_;
};

class UserServiceNull : virtual public UserServiceIf {
 public:
  virtual ~UserServiceNull() {}
  void add(const User& /* u */) {
    return;
  }
  void get(User& /* _return */, const std::string& /* uid */) {
    return;
  }
};

typedef struct _UserService_add_args__isset {
  _UserService_add_args__isset() : u(false) {}
  bool u :1;
} _UserService_add_args__isset;

class UserService_add_args {
 public:

  static const char* ascii_fingerprint; // = "24A68B7518602171FEB506775F3D06D0";
  static const uint8_t binary_fingerprint[16]; // = {0x24,0xA6,0x8B,0x75,0x18,0x60,0x21,0x71,0xFE,0xB5,0x06,0x77,0x5F,0x3D,0x06,0xD0};

  UserService_add_args(const UserService_add_args&);
  UserService_add_args& operator=(const UserService_add_args&);
  UserService_add_args() {
  }

  virtual ~UserService_add_args() throw();
  User u;

  _UserService_add_args__isset __isset;

  void __set_u(const User& val);

  bool operator == (const UserService_add_args & rhs) const
  {
    if (!(u == rhs.u))
      return false;
    return true;
  }
  bool operator != (const UserService_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserService_add_args& obj);
};


class UserService_add_pargs {
 public:

  static const char* ascii_fingerprint; // = "24A68B7518602171FEB506775F3D06D0";
  static const uint8_t binary_fingerprint[16]; // = {0x24,0xA6,0x8B,0x75,0x18,0x60,0x21,0x71,0xFE,0xB5,0x06,0x77,0x5F,0x3D,0x06,0xD0};


  virtual ~UserService_add_pargs() throw();
  const User* u;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserService_add_pargs& obj);
};


class UserService_add_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  UserService_add_result(const UserService_add_result&);
  UserService_add_result& operator=(const UserService_add_result&);
  UserService_add_result() {
  }

  virtual ~UserService_add_result() throw();

  bool operator == (const UserService_add_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const UserService_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserService_add_result& obj);
};


class UserService_add_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~UserService_add_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const UserService_add_presult& obj);
};

typedef struct _UserService_get_args__isset {
  _UserService_get_args__isset() : uid(false) {}
  bool uid :1;
} _UserService_get_args__isset;

class UserService_get_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  UserService_get_args(const UserService_get_args&);
  UserService_get_args& operator=(const UserService_get_args&);
  UserService_get_args() : uid() {
  }

  virtual ~UserService_get_args() throw();
  std::string uid;

  _UserService_get_args__isset __isset;

  void __set_uid(const std::string& val);

  bool operator == (const UserService_get_args & rhs) const
  {
    if (!(uid == rhs.uid))
      return false;
    return true;
  }
  bool operator != (const UserService_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserService_get_args& obj);
};


class UserService_get_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~UserService_get_pargs() throw();
  const std::string* uid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserService_get_pargs& obj);
};

typedef struct _UserService_get_result__isset {
  _UserService_get_result__isset() : success(false) {}
  bool success :1;
} _UserService_get_result__isset;

class UserService_get_result {
 public:

  static const char* ascii_fingerprint; // = "023F09C9435C4DF1EC71C1968922649F";
  static const uint8_t binary_fingerprint[16]; // = {0x02,0x3F,0x09,0xC9,0x43,0x5C,0x4D,0xF1,0xEC,0x71,0xC1,0x96,0x89,0x22,0x64,0x9F};

  UserService_get_result(const UserService_get_result&);
  UserService_get_result& operator=(const UserService_get_result&);
  UserService_get_result() {
  }

  virtual ~UserService_get_result() throw();
  User success;

  _UserService_get_result__isset __isset;

  void __set_success(const User& val);

  bool operator == (const UserService_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const UserService_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const UserService_get_result& obj);
};

typedef struct _UserService_get_presult__isset {
  _UserService_get_presult__isset() : success(false) {}
  bool success :1;
} _UserService_get_presult__isset;

class UserService_get_presult {
 public:

  static const char* ascii_fingerprint; // = "023F09C9435C4DF1EC71C1968922649F";
  static const uint8_t binary_fingerprint[16]; // = {0x02,0x3F,0x09,0xC9,0x43,0x5C,0x4D,0xF1,0xEC,0x71,0xC1,0x96,0x89,0x22,0x64,0x9F};


  virtual ~UserService_get_presult() throw();
  User* success;

  _UserService_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const UserService_get_presult& obj);
};

class UserServiceClient : virtual public UserServiceIf {
 public:
  UserServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  UserServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void add(const User& u);
  void send_add(const User& u);
  void recv_add();
  void get(User& _return, const std::string& uid);
  void send_get(const std::string& uid);
  void recv_get(User& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class UserServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<UserServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (UserServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  UserServiceProcessor(boost::shared_ptr<UserServiceIf> iface) :
    iface_(iface) {
    processMap_["add"] = &UserServiceProcessor::process_add;
    processMap_["get"] = &UserServiceProcessor::process_get;
  }

  virtual ~UserServiceProcessor() {}
};

class UserServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  UserServiceProcessorFactory(const ::boost::shared_ptr< UserServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< UserServiceIfFactory > handlerFactory_;
};

class UserServiceMultiface : virtual public UserServiceIf {
 public:
  UserServiceMultiface(std::vector<boost::shared_ptr<UserServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~UserServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<UserServiceIf> > ifaces_;
  UserServiceMultiface() {}
  void add(boost::shared_ptr<UserServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void add(const User& u) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(u);
    }
    ifaces_[i]->add(u);
  }

  void get(User& _return, const std::string& uid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, uid);
    }
    ifaces_[i]->get(_return, uid);
    return;
  }

};



#endif
